{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","Notification","message","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"kNAgBeA,EAdF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QAGN,4BAAQC,QAASL,GAAmBC,K,gBCgB3B,EAnBA,WAEb,OADgBK,IAAMC,IARR,cASCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAiB5B,EAdA,SAAAC,GAEb,OADgBL,IAAMM,KAbR,aAasBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAY5B,EATA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAlBF,aAkBE,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCdrCK,EAAS,WAMb,OACE,yBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIR,6BACA,uGA0HSC,EArHH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEGvB,MAAK,SAAAwB,GACJT,EAASS,QAEZ,IAEH,IAwDMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAnC,GAAI,OAAIA,EAAKG,aAGxBiC,EAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAgB,OAAZA,EACK,KAIP,yBAAKjC,UAAU,SACZiC,IAKP,OACE,6BACE,qCACA,kBAACD,EAAD,CAAcC,QAASR,IACvB,6BACE,4BAAQvB,QAAS,kBAAMsB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGO,EAAYI,KAAI,SAACtC,EAAMuC,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACLvC,KAAMA,EACNC,iBAAkB,kBAhED,SAACa,GAI1B,IAAMd,EAAOuB,EAAMkB,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,KAQhC6B,EAAW,2BAAQ3C,GAAR,IAAcG,WAAYH,EAAKG,YAIhD6B,EACUlB,EAAI6B,GACXlC,MAAK,SAAAmC,GACJpB,EAASD,EAAMe,KAAI,SAAAtC,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAO4C,SAEpDC,OAAM,SAAAC,GACLhB,EAAgB,SAAD,OACJ9B,EAAKK,QADD,yCAGf0C,YAAW,WACTjB,EAAgB,QACf,KAEHN,EAASD,EAAMY,QAAO,SAAAO,GAAC,OAAIA,EAAE5B,KAAOA,SAmCRkC,CAAmBhD,EAAKc,WAItD,0BAAMmC,SA3FM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB/C,QAASoB,EACT4B,MAAM,IAAIC,MAAOC,cACjBpD,UAAWqD,KAAKC,SAAW,GAC3B3C,GAAIS,EAAMmC,OAAS,GAGrB1B,EACUoB,GACP3C,MAAK,SAAAmC,GACJpB,EAASD,EAAMoC,OAAOf,SAgFtB,2BACEgB,MAAOnC,EACPoC,SA9EiB,SAACX,GACxBxB,EAAWwB,EAAMY,OAAOF,UA+EpB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MC/HNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.5ae00cd2.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n\n      {/*button to set the importance of the note*/}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\n\n\n/*we are no longer returning the promise returned by axios directly, but are assigning the promise\nto the request variable, and then calling its .then method.\n*/\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\n\n// This module returns an object that has 3 functions as its\n// properties that deal with notes. The functions directly return the promises returned\n// by the axios methods\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\n//import axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  //Event handler to change the importance of notes, must be handed to \n  // every note component. Each note receives its own unique event handler\n  // function, since the id of every note is unique\n  const toggleImportanceOf = (id) => {\n\n\n    // array find function is used to find the note, and assign it to the note variable\n    const note = notes.find(n => n.id === id)\n\n    /* \n    { ...note } creates a new object that is a copy of the original note, but the important \n    property is changed to its negation\n\n    we cannot use note.important = !note.important because that's mutating state directly in React\n    */\n    const changedNote = { ...note, important: !note.important }\n\n    // this sets the notes state to a new array, that is the same as teh old array, but the \n    // old note that is updated with a new importance\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content} was already removed from the server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        //returns a new array with only the items in the list that are in the backend\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n\n  const Notification = ({message}) => {\n    if (message === null) {\n      return null\n    }\n\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) =>\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}